const api = require("@src");
const config = require("@root/config");
const db = require("@root/db");
const request = require("supertest");

const example = {
  // example resource goes here.
};

describe("{{resourceName}} resource", () => {
  beforeEach(async () => {
    await db.migrate.latest().then(() => db.seed.run());
  });

  afterEach(async () => {
    await db.migrate.rollback(config.knex.migrations, true);
  });

  describe("GET /{{resourceName}}", () => {
    it("returns status 200", async (done) => {
      const response = await request(api).get("/{{resourceName}}");
      expect(response.status).toBe(200);
      expect(response.body.length > 0).toBe(true);
      done();
    });
  });

  describe("POST /{{resourceName}}", () => {
    it("returns status 201", async (done) => {
      const response = await request(api)
        .post("/{{resourceName}}")
        .send(ninteenEightyFour);
      expect(response.status).toBe(201);
      done();
    });

    it("returns status 422, when data is invalid", async (done) => {
      const response = await request(api).post("/{{resourceName}}").send({});
      expect(response.status).toBe(422);
      expect(response.body.message).toBe("validation failed");
      expect(response.body.errors.length > 0).toBe(true);
      done();
    });
  });

  describe("PUT /{{resourceName}}/:id", () => {
    it("returns status 200", async (done) => {
      const { body } = await request(api).get("/{{resourceName}}");
      const {{singularResourceName}} = body[0];
      const response = await request(api)
        .put(`/{{resourceName}}/${{singularResourceName}}.id}`)
        .send({
          ...{{singularResourceName}},
          author: "anonymous",
        });
      expect(response.status).toBe(200);
      done();
    });

    it("returns status 404, when id does not exist", async (done) => {
      const response = await request(api)
        .put(`/{{resourceName}}/NaN`)
        .send({
          ...ninteenEightyFour,
          author: "anonymous",
        });
      expect(response.status).toBe(404);
      done();
    });
  });

  describe("DELETE /{{resourceName}}/:id", () => {
    it("returns status 200", async (done) => {
      const { body } = await request(api)
        .post("/{{resourceName}}")
        .send(ninteenEightyFour);

      const response = await request(api).delete(`/{{resourceName}}/${body.id}`);
      expect(response.status).toBe(200);
      done();
    });

    it("returns status 404, when id does not exist", async (done) => {
      const response = await request(api).delete("/{{resourceName}}/NaN");
      expect(response.status).toBe(404);
      done();
    });
  });
});
